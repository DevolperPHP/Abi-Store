<%- include("../layout/navbar") -%>

<% if(err.length > 0) {%>
    <script>
        Swal.fire({
            icon: 'error',
            title: 'Item already added',
            text: 'This item has already been added'
        })
    </script>
<%}%>

<% if(err_new.length > 0) {%>
    <script>
        Swal.fire({
            icon: 'error',
            title: 'Purchase is empty',
            text: 'You did not add any item !'
        })
    </script>
<%}%>

<div class="purchase">
  <button class="add-btn" onclick="window.location.href='/purchase'"><ion-icon class="icon"
    name="add-outline"></ion-icon></button>
    <br><br>
    <br>
    <p class="title">New purchase</p>
    <br>
    <form class="add-by-code-form" id="sellForm" method="post">
      <input type="text" id="codeInput" name="code" placeholder="Barcode" autocomplete="off" required>
      <button type="submit">Submit</button>
  </form><br><br>
  <script src="/javascript/autoselect.js"></script>
  <script>
    document.getElementById('sellForm').addEventListener('submit', function(event) {
        event.preventDefault();
        var codeValue = document.getElementById('codeInput').value;
        var newAction = '/purchase/add-by-code/' + encodeURIComponent(codeValue) + '?_method=PUT';
        this.action = newAction;
        this.submit();
    });
</script>
    <div class="autocomplete" style="width:300px;">
        <input id="myInput" autocomplete="off" type="text" placeholder="Search for item">
      </div>

      <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>#</th>
                <th class="only-pc">Image</th>
                <th>Name</th>
                <th>Qty</th>
                <th>Size</th>
                <th>Color</th>
                <th>Cost</th>
                <th>Selling price</th>
                <th>Total</th>
                <th>Delete</th>
            </tr>
        </thead>

        <tbody>
            <% for (let i = 0; i < user.purchase.length; i++) {%>
                <tr>
                    <td><%= i+1%></td>
                    <td class="only-pc"><img src="/upload/images/<%= user.purchase[i].image%>" alt="Product image"></td>
                    <td><%= user.purchase[i].name%></td>

                    <td class="qty-cart">
                       <%= user.purchase[i].qty%>
                      <br>
                      <div class="cart-btns flex">
                          <button onclick="window.location.href='/purchase/edit-qty/<%= user.purchase[i].id%>/<%= user.purchase[i].qty%>'">Edit</button>
                      </div>
                  </td>
                    <td><%= user.purchase[i].size%></td>
                    <td><div class="color" style="background-color: <%= user.purchase[i].color%>;"></div></td>
                    <td><%= user.purchase[i].cost.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")%></td>
                    <td><%= user.purchase[i].sell.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")%></td>
                    <td><%= user.purchase[i].total.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")%></td>
                    <td><form action="/purchase/remove/<%= user.purchase[i].id%>?_method=PUT" method="post">
                        <button><ion-icon class="icon" name="remove-outline"></ion-icon></button>
                    </form></td>
                </tr>
            <% } %>
            <tr>
              <td colspan="10">Total : <%= total%> IQD</td>
            </tr>
        </tbody>
      </table>

      <center>

      <form action="/purchase/new" method="post">
        <input type="number" placeholder="Cost" name="cost" required>
        <input type="text" placeholder="Trader name" name="trader" required>
        <select class="form-select" name="storage">
            <option selected>Main Storage</option>
            <option>Store</option>
        </select>
        <br><br>
        <button class="btn btn-success">Confirm</button>
      </form>
    </center>
</div>


<script src="https://cdn.jsdelivr.net/npm/fuse.js@6.6.2"></script>
    <script>
        function autocomplete(inp, arr) {
            let currentFocus;
            const fuse = new Fuse(arr, {
                threshold: 0.4,
            });
    
            inp.addEventListener("input", function () {
                let a, b, val = this.value;
                closeAllLists();
                if (!val) return false;
                currentFocus = -1;
    
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                this.parentNode.appendChild(a);
    
                const results = fuse.search(val);
                results.forEach(({ item }) => {
                    b = document.createElement("DIV");
                    b.innerHTML = `<strong>${item.substr(0, val.length)}</strong>${item.substr(val.length)}`;
                    b.innerHTML += `<input type='hidden' value='${item}'>`;
                    b.addEventListener("click", function () {
                        window.location.href = `/purchase/search/${String(this.getElementsByTagName("input")[0].value)}`
                        closeAllLists();
                    });
                    a.appendChild(b);
                });
            });
    
            inp.addEventListener("keydown", function (e) {
                let x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    currentFocus++;
                    addActive(x);
                } else if (e.keyCode == 38) {
                    currentFocus--;
                    addActive(x);
                } else if (e.keyCode == 13) {
                    e.preventDefault();
                    if (currentFocus > -1 && x) x[currentFocus].click();
                }
            });
    
            function addActive(x) {
                if (!x) return false;
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = x.length - 1;
                x[currentFocus].classList.add("autocomplete-active");
            }
    
            function removeActive(x) {
                for (let i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }
    
            function closeAllLists(elmnt) {
                const x = document.getElementsByClassName("autocomplete-items");
                for (let i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
    
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }
    
        const data = "<%= data %>".split(",");
        autocomplete(document.getElementById("myInput"), data);
    </script>

<%- include("../layout/footer") -%>